name: buildCSharpSDK

on: 
  push:
    branches: [ develop ]

jobs:
  build-csharp:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      # fail-fast: Default is true, switch to false to allow one platform to fail and still run others
      fail-fast: false
      matrix:
        name: [Ubuntu18.04, Ubuntu20.04, macOS, Windows64, Windows]
        include:
        - name: Ubuntu18.04
          os: ubuntu-18.04
        - name: Ubuntu20.04
          os: ubuntu-20.04
        - name: macOS
          os: macos-10.15
        - name: Windows64
          os: windows-2019
        - name: Windows
          os: windows-2019

    steps:
      - name: "Checkout develop Branch"
        uses: actions/checkout@v2
        with:
          ref: develop

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8.x'



      - name: Install conan
        run: |
          python --version
          pip install conan
          conan --version
          echo "Enabling conan revisions and setting parallel_download"
          conan config set general.revisions_enabled=True
          conan config set general.parallel_download=8


      - name: Compile Ubuntu
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -x
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_CSHARP_BINDINGS=ON -DBUILD_NUGET_PACKAGE=OFF \
                -DBUILD_TESTING=OFF -DBUILD_RUBY_BINDINGS=OFF -DBUILD_CLI=OFF \
                -DBUILD_PACKAGE=OFF \
                ../
          
          make -j2


      - name: Compile macOS
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -x
          export CC=clang
          export CMAKE_OSX_ARCHITECTURES=x86_64
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_CSHARP_BINDINGS=ON -DBUILD_NUGET_PACKAGE=OFF \
                -DBUILD_TESTING=OFF -DBUILD_RUBY_BINDINGS=OFF -DBUILD_CLI=OFF \
                -DBUILD_PACKAGE=OFF \
                ../

          make -j3

      - name: Compile Windows 64
        if: matrix.name == 'Windows64'
        uses: lukka/run-cmake@v2
        with:
          cmakeGenerator: VS16Win64
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: ${{ github.workspace }}/CMakeLists.txt
          cmakeBuildType: Release
          cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=Release -DBUILD_CSHARP_BINDINGS=ON -DBUILD_NUGET_PACKAGE=OFF -DBUILD_TESTING=OFF -DBUILD_RUBY_BINDINGS=OFF -DBUILD_CLI=OFF -DBUILD_PACKAGE=OFF'
          buildWithCMakeArgs: "--config Release -j2"
          buildDirectory: ${{ github.workspace }}/build
          buildWithCMake: true

      - name: Compile Windows
        if: matrix.name == 'Windows'
        uses: lukka/run-cmake@v2
        with:
          cmakeGenerator: VS16Win32
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: ${{ github.workspace }}/CMakeLists.txt
          cmakeBuildType: Release
          cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=Release -DBUILD_CSHARP_BINDINGS=ON -DBUILD_NUGET_PACKAGE=OFF -DBUILD_TESTING=OFF -DBUILD_RUBY_BINDINGS=OFF -DBUILD_CLI=OFF -DBUILD_PACKAGE=OFF'
          buildWithCMakeArgs: "--config Release -j2"
          buildDirectory: ${{ github.workspace }}/build
          buildWithCMake: true

      - name: list files
        run: |
          echo "Listing the top directory=========================================="
          ls

          echo "Listing ./build/=========================================="
          ls ./build/

          echo "Listing ./build/Products/=========================================="
          ls -R ./build/Products

  
      - name: Tests
        run: |
          cd csharp/examples/OpenStudio.Tests/
          dotnet remove package OpenStudio 
          dotnet restore OpenStudio.Tests.csproj
          dotnet add OpenStudio.Tests.csproj package OpenStudio -s "./../../../build/Products/csharp/Release"
          dotnet test OpenStudio.Tests.csproj -f NET5

      - name: Additional Tests on Windows for .Net Framework 4.5
        if: runner.os == 'Windows'
        run: |
          cd csharp/examples/OpenStudio.Tests/
          dotnet clean
          dotnet test OpenStudio.Tests.csproj --runtime win-x64 -f NET45


      - name: Zip Build/Source Artifact
        if: runner.os != 'Windows'
        run: |
          zip -r CSharp_${{ matrix.name }}.zip ./build/Products/csharp/Release/*.nupkg
          zip -r CSharp_${{ matrix.name }}_Src.zip ./build/csharp_wrapper/generated_sources ./build/csharp_wrapper/OpenStudio.csproj
          

      - name: Zip Build/Source Artifact
        if: runner.os == 'Windows'
        run: |
          7z a CSharp_${{ matrix.name }}.zip ./build/Products/csharp/Release/*.nupkg
          7z a CSharp_${{ matrix.name }}_Src.zip ./build/csharp_wrapper/generated_sources ./build/csharp_wrapper/OpenStudio.csproj
          

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: CSharp_${{ matrix.name }}
          path: CSharp_${{ matrix.name }}.zip

      - name: Upload artifact generated_sources
        uses: actions/upload-artifact@v2
        with:
          name: CSharp_${{ matrix.name }}_Src
          path: CSharp_${{ matrix.name }}_Src.zip

      - name: Upload artifact (if failed)
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.name }}_Failed
          path: ./build/csharp_wrapper/

